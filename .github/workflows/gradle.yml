# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Rust CD

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v3
      - name: Testing
        run: cargo run 2> output && echo $(cat output) && echo $(cat output) >> $GITHUB_STEP_SUMMARY
  win64:
    env:
      TARGET: x86_64-pc-windows-gnu
    runs-on: windows-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Setup Rust
        run: rustup target add $TARGET
        shell: bash
      - name: MinGW
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x64
      - name: Build
        run: cargo build -r --target $TARGET
        shell: bash
      - name: Install 7z
        run: choco install 7zip -y
        shell: bash
      - name: 7z Compression
        run: 7z a -t7z -mx=9 build.7z ./target/$TARGET/release/sfm.exe
        shell: bash
      - name: Upload to Gofile # Avoiding File Limits of Github
        run: ./.github/scripts/upload.sh build.7z
        shell: bash
  linux64:
    runs-on: ubuntu-latest
    env:
      TARGET: x86_64-unknown-linux-gnu
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Setup Rust
        run: rustup target add $TARGET
      - name: Build
        run: cargo build -r --target $TARGET
      - name: 7z Compression
        run: 7z a -t7z -mx=9 build.7z ./target/$TARGET/release/sfm
      - name: Upload to Gofile # Avoiding File Limits of Github
        run: ./.github/scripts/upload.sh build.7z
        shell: bash
  linuxARM64:
    runs-on: ubuntu-latest
    env:
      TARGET: aarch64-unknown-linux-musl
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Setup Rust
        run: rustup target add $TARGET
      - name: Cross-Compile Dependency
        run: |
          sudo apt-get update && sudo apt-get install -qq crossbuild-essential-arm64 crossbuild-essential-armhf
          cat >>~/.cargo/config <<EOF
          [target.aarch64-unknown-linux-musl]
          linker = "aarch64-linux-gnu-gcc"
          EOF
      - name: Build
        run: cargo build -r --target $TARGET
      - name: 7z Compression
        run: 7z a -t7z -mx=9 build.7z ./target/$TARGET/release/sfm
      - name: Upload to Gofile # Avoiding File Limits of Github
        run: ./.github/scripts/upload.sh build.7z
        shell: bash
#  Cache-Wipe:
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#    needs: [win64, linux64, linuxARM64]
#    steps:
#      - name: Delete Branch Cache
#        uses: snnaplab/delete-branch-cache-action@v1.0.0
#        with:
#          github-token: ${{ secrets.TOKEN }}
